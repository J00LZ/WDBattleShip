#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('battleship:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// Game manager
var GameManager = require('../server/gamemanager');
var Player = require('../server/player');
var gameManager = new GameManager();

// WebSocket
var websocket = require('ws');
const wsServer = new websocket.Server({server});

wsServer.on("connection", function(socket, request){
  console.log("Incoming connection from: " + request.connection.remoteAddress);
  gameManager.addPlayer(new Player(socket), request.connection.remoteAddress);

  socket.on("message", function(message){
      console.log("Message (" + request.connection.remoteAddress + "): " + message)

      // Check if it's a special request
      if (message.startsWith("verify-name:")){
        if (message.split(":").length !== 2){
          // Invalid packet
          socket.send("verify-err:MALFORMED_PACKET");
          return;
        }

        let name = message.split(":")[1];
        let response = "verify-name-rsp:";

        if (gameManager.nameAvailable(name)){
          response += "TRUE";
        } else {
          response += "FALSE";
        }

        socket.send(response);
      } else if (message.startsWith("verify-invite:")){
        if (message.split(":").length !== 2){
          // Invalid packet
          socket.send("verify-err:MALFORMED_PACKET");
          return;
        }

        let code = message.split(":")[1];
        let response = "verify-invite-rsp:";

        if (gameManager.validInviteCode(code)){
          response += "TRUE";
        } else {
          response += "FALSE";
        }

        socket.send(response);
      } else {
        // Not special, let the game manager handle it
        gameManager.handleRequest(socket, message);
      }
  });

  socket.on("close", function(){
    console.log("Closed connection from: " + request.connection.remoteAddress);
    gameManager.removePlayer(socket);
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
